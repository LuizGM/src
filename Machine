import java.util.Scanner;
import java.util.HashMap;
import java.util.TreeMap; 

public class Maquina {

	private HashMap<String,Item> Estoque;

	private TreeMap<Double, Integer> mudar;

	private HashMap<Integer, String> menu;

	private double userMoney;


	public void loadChange(Double cat, Integer quantia) {
		if (change.get(cat) != null) {
			int oldvalue = change.get(cat);
			change.put(cat, valor antigo + quantia);
		}
		else
			change.put(cat, quantia);
	}
	public void loadItems(String nome,  Double preço, Integer quantia) {
		if (stock.get(nome) != null) {
			Item atual = stock.get(nome);
			current.setQuantity(current.getQuantity() + quantia);
		}
		else {
			Item atual = new Item(nome, preço, quantia);
			stock.put(nome, atual);
		}
	}

	public Machine() {
		estoque = new HashMap<String, Item>();

		mudar = new TreeMap<Double, Integer>();

		menu = new HashMap<Integer, String>();

		userMoney = 0;
	}

	public double getMachineTotal() {
		double total = 0;
		for (Double val : change.keySet())
			total = total + (val * change.get(val));
		return total;
	}


	public static void main(String[] args) {
		

        Machine snackVendingMachine = new Machine();

        //Insere items ao menu
        snackVendingMachine.menu.put(new Integer(1), "Snickers");
        snackVendingMachine.menu.put(new Integer(2), "KitKat");
        snackVendingMachine.menu.put(new Integer(3), "Chettos");
        snackVendingMachine.menu.put(new Integer(4), "Sonho de Valsa");
        snackVendingMachine.menu.put(new Integer(5),"Ruffles");
        snackVendingMachine.menu.put(new Integer(6),"Fandangos");
        snackVendingMachine.menu.put(new Integer(7),"Doritos");

        snackVendingMachine.loadChange(new Double(0.01), new Integer(100));
        snackVendingMachine.loadChange(new Double(0.02), new Integer(100));
        snackVendingMachine.loadChange(new Double(0.05), new Integer(100));
        snackVendingMachine.loadChange(new Double(0.1), new Integer(100));
        snackVendingMachine.loadChange(new Double(0.2), new Integer(100));
        snackVendingMachine.loadChange(new Double(0.5), new Integer(100));
        snackVendingMachine.loadChange(new Double(1.0), new Integer(100));
        snackVendingMachine.loadChange(new Double(2.0), new Integer(100));

        snackVendingMachine.loadItems("Snickers", 2.0, 7);
        snackVendingMachine.loadItems("KitKat", 2.20, 5);
        snackVendingMachine.loadItems("Ruffles", 5.25, 10);
        snackVendingMachine.loadItems("Doritos", 4.0, 8);
        snackVendingMachine.loadItems("Fandangos", 4.0, 11);
        snackVendingMachine.loadItems("Sonho de Valsa", 1.5, 3);
        snackVendingMachine.loadItems("Chettos", 3.5, 20);


        snackVendingMachine.runMachine();
        
    }
    public void buyItem(Integer vender, double dinheiro) {

    	Item atual = this.stock.get(this.menu.get(vender));
    	double esperado = current.getPrice();
    	if (dinheiro > esperado) {
    		if (esperado - dinheiro < this.getMachineTotal()) {
    			this.dispenseItem(atual);
    			this.makeChange(dinheiro - esperado);
                this.userMoney = (double) (dinheiro - esperado);
    		}
    		else
    			System.out.println("Desculpa ! Mudança insuficiente. Cancelando Operação");
    	}
    	else
    		System.out.println("Desculpe, dinheiro insuficiente! Insira "+ (esperado - dinheiro) +" para comprar este item");


    }

    public void dispenseItem(Item newItem) {
    	newItem.setQuantity(newItem.getQuantity()-1);
    	System.out.println("Porfavor pegue o "+newItem.getName()+" da gaveta");
    }

    public void runMachine() {

    	Scanner input = new Scanner(System.in);
    	System.out.println("MENU DE SELEÇÃO");
        for (Integer numero : this.menu.keySet())
        {
        	String nome = this.menu.get(numero);
        	if(this.stock.get(nome) != null)
        		System.out.println("pressione "+ (int) numero+" para "+ nome + " preço "+ this.stock.get(nome).getPrice());
        }
        System.out.println("Insira moedas e notas seguidas de * para iniciar a seleção: ");
        boolean exit = false;
        while (true)
        {
        	while (input.hasNext()) {

        		if (input.hasNextDouble())
        			this.userMoney = this.userMoney + input.nextDouble();
        		else if (input.next().equals("*"))
        			break;
        	}
            while (!exit) {

                System.out.println("quantia creditado: "+this.userMoney);
                
                System.out.println("Porfavor selecione, $ para adicionar dinheiro ou SAIR para sair da maquina: ");

            	if(input.hasNextInt()) {
            		int selecionar = input.nextInt();
                    if (this.menu.containsKey(selecionar))
                        buyItem(selection, this.userMoney);
            		else
            			System.out.println("Insira um item do menu valido");
            	}
                else {

                    String command = input.next();
                    if (command.equals("$")) {

                        System.out.println("Insira moedas ou notas seguidas de * para colocar credito");
                        while (input.hasNext()) {
                            if (input.hasNextDouble())
                            this.userMoney = this.userMoney + input.nextDouble();
                            else if (input.next().equals("*"))
                            break;
                        }
                    }
                    else if (command.equals("SAIR")) {

                        System.out.println("Muito Obrigado! Tenha um excelente dia.");
                        System.exit(0);
                    }
                }
            }

        }
    }

    public void makeChange(Double necessita)
    {
        System.out.println("mudança necessaria :"+necessaria);
    	double temp = necessita;
    	for (Double valor : this.change.descendingMap().keySet()) {

    		int numMoedas = (int) (temp  / value.doubleValue());
    		temp = temp % value.doubleValue();
    		if (numMoedas > 0) {
    			int velho = this.change.get(valor).intValue();
    			if (numMoedas < velho) {
    				this.change.put(valor, new Integer(old - numMoedas));
    				System.out.println("Porfavor pegue sua "+numMoedas+" moeda de"+ valor);
    			}
    		}
    	}
    }
}
